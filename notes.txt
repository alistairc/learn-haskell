Book
http://book.realworldhaskell.org/read

Commands

ghci is REPL
    ^D or :quit to exit
    use 'let' to define stuff
    implicit 'it' variable 
    can use :set +t to print more type info after each command
    :info x to get type info about a symbol
ghc is compiler
runhaskell to run script
    aliased to rh on my shell

    
Syntax
    Functions and variables, incl type variables start with a lower case
    Types start with an uppercase
    This isn't just convention!
    
    Whitespace is significant:
        spaces seperate
        new lines terminate
        blocks are indented
Invoking: 
    > func arg1 arg2
Infix:   
    > arg1 `func` arg2
$:
    allow you to skip parens. Everything after the $ is the last arg to the function
        > print $ 1 + 2
    is the same as
        > print (1+2)
    and
        > map (+1) (map fibonacci [1..20])
   could be:
        > map (+1) $ map fibonacci [1..20]
Types & Literals:
    Num: 1
    Fractional: 1.1
    [Char]: "hello"    Strings are justr lists of Char
        C style escaping: "hello\nworld"
    Char: 'h'
    Bool: False
Operators: 1 + 3
  infix by default, but can be prefix:
  > (+) 1 3
  Q: what makes a function an operator?  is it the symbol?
Booleans:
    > True
    > False
    > True && True == True
    > 1 + 2 == 3
    True
    
    Not equals operator is /=
List:
    Empty:
    []
    must all be same type: [1,2,3]
List operators:
    (++)  is concatenate:
        > [3,1,2] ++ [1,2,3]
        [3,1,2,1,2,3]
    (:) is construct.  prepends item to head of lists
        > 1 : [2,3]
        [1,2,3]
    head gets first item
        > head [1,2,3]
        1
    tail gets all the rest
        > tail [1,2,3]
        [2,3]
Enumeration (like a range): 
    > [1..50]
    > [0,5..25]
    > [1..]
Tuples:
    fixed size
    > (1, "alistair cooke", "12 leafield close")
    

IO:
    putStr
    putStrLn 
    getLine
    <- operator.  bind
        line <- getLine
        line is bound to the output of getLine
    do blocks:
        main = do
            putStr "Hello "
            putStrLn "World"
            
            